/* this part is before using grid lines. this part creates a 2 column grid. the css below this will use grid lines */

body {
    width: 90%;
    max-width: 900px; /* before the px, the width was wider but bc of the px, it makes the 90% smaller */
    margin: 2em auto;
    font: 0.9em/1.2 Arial, Helvetica, sans-serif;
}

.container {
    display: grid; /* creates the grid but won't see it until you give it values for col/row and the size */
    grid-template-columns: 1fr 3fr;  /* 2 col's. 1st is 1fr and 2nd is 3fr  */
    /* notice it is only cols but the content is also put into rows. the rows are implicit and will have lots 
    of rows depending on how much content you have. but the cols are explicit so will never go beyond the 2 cols */
    gap: 20px;
}

header, /* adds some rounded borders and padding. also a background color */
footer {
    border: 2px solid rgb(79, 185, 227);
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207, 232, 220);
}

aside { /* border on the right side only */
    border-right: 1px solid #999;
}

/* display: grid and grid-template-columns: 1fr 3fr creates a grid and your elements flow into the space based on 
the default flow behavior of the browser (ex inline and block flow). since the grid always has lines, in english, it
will be numbered 1 for the first col which will be at the left hand side of the grid. and also numbered 1 for the first
row at the top of the grid. other languages may be numbered in a backwards sort of way.

we can arrange the lines using start and end. grid-column-start, grid-column-end, grid-row-start, grid-row-end. if you 
use the shorthand grid-column and grid-row, then you specify the start and end separated with a forward slash /

*/

/* this part is using grid lines. in browser dev tools, the end shows as auto when no end is provided in the css */

header { /* appears to take up the entire first row, spanning all the cols */
    grid-column: 1/3; /* start at col 1 and end at col 3 */
    grid-row: 1; /* start at row 1, no end provided. in browser dev tools, the end shows as auto */
}

article { /* appears to take up the second col in the second row but doesn't span all cols */
    grid-column: 2; /* start at col 2 */
    grid-row: 2; /* start at row 2 */
}

aside { /* appears to take up the first col in the second row but doesn't span all cols */
    grid-column: 1; /* start at col 1  */
    grid-row: 2; /* start at row 2 */
}
 
footer { /* similar to the header but appears at the bottom */
    grid-column: 1/3; /* start at col 1 and end at col 3 */
    grid-row: 3; /* start at row 3 */
}

/* notice that when you created the grid, you only did grid-template-columns: 1fr 3fr. these 2 cols are the explicit 
grid. yet there are rows in your grid. the rows are the implicit grid. when something won't fit in the explicit 
grid of 2 cols, then it will be placed in the implicit grid in the rows. but also notice this will never go beyond 
2 cols but will go into many many rows bc the rows are implicit and the 2 cols are sort of fixed. a way to think of 
explicit is that it is fixed, unchanged. */ 



